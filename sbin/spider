#!/usr/bin/env php
<?php

date_default_timezone_set('PRC');

$path = dirname(__DIR__);

$usage = <<<EOT
Usage:
  spider [Commands] [Options]

Commands:
  install    install spider
  reinstall  reinstall spider
  start      start spider
  run        crawl urls
  restart    restart spider
  stop       stop spider
  remove     stop and delete spider
  log        show spider logs
  status     show spider status
  clear      clear url cache 
  truncate   clear url and image cache


EOT;

$usage_run = <<<EOT
Usage:
  spider run [Options | Urls]

Options:
  [-h | --help]            show spider run help
  [--history]              show spider run histories

Urls:
  spider run url           Crawl url
  spider run url1 url2     Crawl url1 and url2


EOT;

$usage_log = <<<EOT
Usage:
  spider log [Options]

Options:
  [-h | --help] show usage of log command
  [-l | --ls]   list available logs

  spider        default, tail spider log by date
  producer      tail producer log by date
  docker        tail docker compose logs
  access        tail nginx access log
  debug         tail debug log


EOT;

$usage_clear = <<<EOT
Usage:
  spider clear [Urls]

Example:
  spider clear all  clear all spiders cache
  spider clear url  clear spider url cache


EOT;

/**
 * docker-compose 执行命令
 * @param string $command
 *
 */
$docker = function($command, $echo = true) use($path) {
    $str = "docker-compose -f $path/etc/docker-compose.yml -p spider $command";
    if ($echo) {
        system($str);
    } else {
        exec($str, $res);
        return $res;
    }
};
/**
 * 读文件
 * @param string $filename
 *
 *
 */
$getFile = function($filename) use($path) {
    substr($$filename, 0, 1) == '/' or $filename = $path.'/'.$filename;
    return file_exists($filename) ? 
        file_get_contents($filename) : false;
};

/**
 * 写文件
 * @param string $filename
 *
 */
$setFile = function($filename, $data, $append = false) use($path) {
    substr($$filename, 0, 1) == '/' or $filename = $path.'/'.$filename;
    return $append ? file_put_contents($filename, $data, FILE_APPEND) : 
        file_put_contents($filename, $data);
};

/**
 * 安装spider
 *
 *
 */
$spiderInstall = function() use($path) {
    $crawler = "$path/src/crawler";
    $kafka = "$path/src/kafka";

    //step1, install composer packages
    system("docker run --rm -v $kafka:/app -it composer install");
    system("docker run --rm -v $crawler:/app -it composer install");

    //step2, check packages
    exec("docker run --rm -v $kafka:/app -it composer show -i", $res1);
    exec("docker run --rm -v $crawler:/app -it composer show -i", $res2);
    if (count($res1) < 3 || count($res2) < 7) {
        return false;
    }
    system("docker run --rm -v $crawler:/app -it composer dump-autoload -o");
    return true;
};
/**
 * 爬取url，若两次域名不同，这重启
 * consumer容器
 *
 * @param array $urls
 *
 *
 */
$spiderRun = function($urls) use($getFile, $setFile, $docker) {
    //check topic
    $topic_old = $getFile("src/kafka/.topic");

    $topic = '';
    foreach($urls as $url) {
        $topic .= parse_url($url)['host']."\n";
    }
    if (empty($topic)) {
        exit("Invalid url\n");
    }

    //$res = $docker("top consumer", false);
    //exec("docker top spider_consumer_1 ps aux | grep 'php Consumer.php'", $res);

    print_r($res);exit;
    //if ($topic_old != $topic) {
        //$setFile("src/kafka/.topic", $topic, true);
        //$docker("exec consumer php Consumer.php");
        //$docker('restart consumer');
    //}
    $data = 'url='.json_encode($urls);
    echo "Preparing to crawl...";
    system("docker exec -it spider_crawler_1 curl -d '$data' localhost/crawler/start");
};

/**
 * 清空爬虫缓存
 *
 * @param string $domain
 * @param string action <clear | truncate>
 * clear: 删除url缓存，图片不会重爬
 * truncate: 删除所有缓存，图片会重爬
 *
 */
$spiderCache = function($domain, $action) {
    system("docker exec -it spider_crawler_1 curl -d 'domain=$domain' localhost/crawler/$action");
};

/**
 * 查看爬虫是否启动
 * 
 * @return bool
 *
 */
$checkSpider = function() {
    exec("docker ps | grep spider_", $res);
    return count($res) == 5 ? true : false;
};

/**
 * 终止程序执行并输出消息
 *
 */
$exit = function() {
    foreach(func_get_args() as $msg) {
        echo <<<EOT

$msg

EOT;
    }
    exit;    
};

/**
 *
 * start
 *
 *
 *
 */

//set args

$command = isset($argv[1]) ? $argv[1] : '';
$option = isset($argv[2]) ? $argv[2] : '';

if ($argc == 1 || !in_array($command, [
    'install',
    'reinstall',
    'start', 
    'run',
    'restart', 
    'stop', 
    'remove',
    'log',
    'status',
    'clear',
    'truncate',
])) {
    exit($usage);
}
//check if installed
if (!in_array($command, ['install', 'reinstall'])) {
    if (!$getFile('src/.installed')) {
        $exit('Spider has not installed',
            'Use [spider install] first'
        );
    }
}

switch ($command) {
    case 'install':
    case 'reinstall':

        //check if installed
        $installed = "src/.installed";

        if ($command == 'install' && $getFile($installed)) {
            $exit("You had spider installed...",
            "If you need to reinstall use [spider reinstall]"
            );
        }
        if ($spiderInstall()) {
            $setFile($installed, date('Y-m-d H:i:s', time()), true);
            echo "Spider installed success...";
        }
    break;

    case 'start':
        $checkSpider() ? 
            $exit('Spider is running...') : 
            $docker('up -d');
        break;

    case 'restart':
        $docker('restart');
        break;

    case 'run':
        $his_file = 'src/kafka/.history';

        switch ($option) {
            case '':
            case '-h':
            case '--help':
                exit($usage_run);
            case '--history':
                //delete hisotry
                if (isset($argv[3]) && 
                    $argv[3] == 'clear') {
                    $setFile($his_file, '');
                    $exit('All spider run histories are cleared');
                }
                echo $getFile($his_file);
                break;
            default:
                //check status
                if (!$checkSpider()) {
                    $exit('Spider is now not running',
                    'Use [spider start] first');
                }
                if (substr($option, 0, 4) != 'http') {
                    $exit('Url must start with http|https');
                }
                $url = array_slice($argv, 2);
                //记录历史
                $date = date('Y-m-d H:i:s', time());
                $setFile($his_file, "[$date] ".implode($url, "\n[$date] ")."\n", true);

                $spiderRun($url);
        }
        break;
    case 'stop':
        $docker('stop');
        break;
    case 'rm':
        $docker('rm -f');
        break;
    case 'remove':
        fwrite(STDOUT, "确定删除爬虫(y/n): ");
        if (strtolower(trim(fgets(STDIN))) == 'y')
            $docker('down');
        break;
    case 'status':
        $docker('ps');
        break;
    case 'log':
        switch($option) {
            case '-l':
            case '--ls':
                $logs = scandir("$path/logs");
                echo "Available logs:\n";
                foreach($logs as $l) {
                    if (empty($l) || substr($l, 0, 1) == '.') 
                        continue;
                    echo "  ".current(explode('-', $l))."\n";
                }
                echo "  docker";

                exit($usage_log_ls);
                break;
            case '-h':
            case '--help':
                exit($usage_log);
                break;
            case 'docker':
                $docker('logs -f');
                break;
            case 'access':
            case 'producer':
            case 'spider':
            case 'debug':
            //case '':
                $d = date('Y-m-d', time());
                !empty($option) or $option = 'spider';
                system("tail -f $path/logs/$option-$d.log");
                break;
            case '':
                exit($usage_log);
                break;
            default:
                echo "$option log not found \n\n";
                exit($usage_log);
        }

        break;
    case 'clear':
    case 'truncate':
        if (!$checkSpider())
            $eixt('Spider is not running...');

        if (empty($option)) 
            exit($usage_clear);

        $url = substr($option, 0 ,4) == 'http' ? 
            $option : 'http://'.$option;

        $domain = parse_url($url['host']);
        if (empty($domain))
            $exit('Invalid url: '.$option);

        $spiderCache($domain, $command);
        break;
}
